Následující 3 cvičení vám pomohou procvičit znalosti objektově orientovaného programování v PHP z minulých lekcí. Ve vlastním zájmu se je pokuste vyřešit sami. Pod článkem máte pro kontrolu řešení ke stažení. Ale pozor, jakmile se na něj podíváte bez vyřešení příkladů, ztrácí pro vás cvičení smysl a nic se nenaučíte :)

Pokud si opravdu nebudete vědět rady, podívejte se raději znovu do minulých tutoriálů a pokuste se na to přijít.

Jednoduchý příklad
##################
Naprogramujte jednoduchou webovou diskuzi. Na konci stránky se bude nacházet formulář s poli na přezdívku a zprávu. Zpráva se po odeslání uloží do databáze. Nad formulářem se bude zobrazovat posledních 10 zpráv od nejnovějších po starší.

.<>
[* php/cviceni/diskuze.png .(Webová diskuze) *]

Ve zprávách umožněte vkládání smajlíků, více řádků a zabraňte zpracování HTML tagů. **Do databáze ukládejte vždy jen surová data**, formátování zprávy se provádí až při jejím výpisu, v databázi je uložena tak, jak ji uživatel odeslal!

Aby se zabránilo doublepostům (dvojitému odeslání příspěvku po stisknutí klávesy F5), je vhodné po vložení zprávy do databáze přesměrovat na tu samou adresu, na které se nacházíte, tedy pravděpodobně na index.php. Ztratí se tím odeslaná data a klávesa F5 nevyvolá opětovné odeslání. Přesměrování provedete pomocí:

/---code php
header('Location: index.php');
exit;
\---

Ale pozor, funkci header() musíte zavolat ještě předtím, než odešlete jakýkoli výstup. Zpracování formuláře tedy musí být na úplném začátku php souboru.

Smajlíci
********
Níže si můžete stáhnout obrázky smajlíků:

[* php/cviceni/smajlici/grin.png .(Smajlík) *] [* php/cviceni/smajlici/smile.png .(Smajlík) *] [* php/cviceni/smajlici/surprised.png .(Smajlík) *] [* php/cviceni/smajlici/tongue.png .(Smajlík) *] [* php/cviceni/smajlici/unhappy.png .(Smajlík) *] [* php/cviceni/smajlici/wink.png .(Smajlík) *]

Středně pokročilý příklad
#########################
Vytvořte databázi článků s následujícími sloupci:

- clanek_id - Id článku
- url - Url adresa článku, pomocí které se k němu přistupuje z adresní řádky. Např. uvodni-clanek.
- titulek - Titulek článku, např. Úvodní článek. Titulek se později zobrazí v nadpisu H1 a v hlavičce stránky.
- popisek - Krátký popisek článku, který se později zobrazí v description v hlavičce stránky.
- obsah - Vlastní obsah článku s jeho HTML kódem.

Článek vypisujte na základě $_GET parametru. Pokud není přítomen, vypište článek s URL uvodnik:

.<>
[* php/cviceni/clanky2.png .(Zobrazení úvodního článku) *]

.<>
[* php/cviceni/clanky3.png .(Zobrazení článku o PHP) *]

K aplikaci dodejte i jednoduchou administraci, pomocí které bude možné články přidávat a editovat.

.<>
[* php/cviceni/clanky3.png .(Administrace článků) *]

Zabezpečení administrace zanedbejte. Pokud budete chtít web přecijen někam nasadit, máme pro vás tip na úplně jednoduché zabezpečení. Soubor s administrací pojmenujte např. admin978.php místo předvídatelného administrace.php a nikde na webu na něj neodkazujte. URL adresu budete znát jen vy a tím pádem vám web nikdo nerozbije :)

Ačkoli je tento "redakční systém" jistě použitelný, programují se v praxi podobné weby ještě trochu jinak. To později zjistíte v seriálu "Jednoduchý redakční systém v PHP objektově (MVC)":objektovy-mvc-redakcni-system-v-php.

Pozn.: V ukázkovém kódu je použit tzv. ternární operátor. Ten se používá pro zjednodušení konstrukce if else v případě, že chceme vrátit 2 různé hodnoty pro platnost/neplatnost nějaké podmínky:

/---code php
if ($podminka)
    $promenna = 'hodnota1';
else
    $promenna = 'hodnota2';
\---

Zápis můžeme ternárním operátorem zkrátit na jediný řádek:

/---code php
$promenna = ($podminka) ? 'hodnota1' : 'hodnota2';
\---

Používat ho nemusíte, ale měli byste ho umět číst :)


Pokročilý příklad
#################
Vytvořte aplikaci, simulující chatovacího robota. Robotovi zadáme otázku (do formulářového pole). Robot se podívá, zda má takovou otázku v databázi a pokud ano, vypíše k ní odpověď. Pokud ne, zeptá se uživatele na odpověď a tu si spolu s původní otázkou uloží do databáze pro pozdější použití. Fungování robota je poznat z obrázku níže:

.<>
[* php/cviceni/chatbot.png .(Chatbot v PHP) *]

Pro uchovávání historie a obecně stavů aplikace se hodí superglobální pole $_SESSION. To bylo již zmíněno v "jednoduchém redakčním systému NERS":ners-registrace-uzivatelu-v-php-tutorial, kde je také ukázáno její využití. Nicméně si o něm něco řekněme i zde.

Pro práci s $_SESSION musíme jako první na úplném začátku skriptu zavolat funkci:

/---code php
session_start()
\---

Funkce nám umožní používat tzv. session (česky relace nebo někdy i sezení), která si pamatuje data uživatele, se kterým komunikujeme. Tento řádek musí být na úplném začátku PHP souboru (ne bloku, opravdu souboru), ve kterém uživatelskou relaci používáme. Před session_start() se nesmí nalézat žádné HTML, ani prázdné řádky, ani mezery, jinak nebude fungovat. To samé platí pro funkci header().

Do $_SESSION si můžeme ukládat data, které souvisí s tím uživatelem, se kterým právě komunikujeme. Relace vyprší ve výchozím nastavení PHP za 24 minut nečinnosti nebo po zavření prohlížeče. Jakmile ji jednou vytvoříme v nějakém skriptu, zůstanou nám její data přístupná i pro ostatní PHP skripty v aplikaci. $_SESSION se používá úplně stejně jako např. $_GET nebo $_POST, je to obyčejné asociativní pole, kam si můžeme uložit naprosto cokoli.

Někdy se hodí session vymazat, toho docílíme funkcí:

/---code php
session_destroy();
\---